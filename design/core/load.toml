[SPC-load]
partof = "REQ-settings"
text = '''
The load module **shall** encapsulate:
  1. loading settings correctly
  2. following paths to artifact directories
  3. loading artifacts from files
  4. validating name-collisions
  5. validating attribute types
  6. creating missing parents
  7. auto-linking artifacts
  8. final artifact linking
  9. analyzing completeness

# Stages

## Stage 1

 1. loading initial settings.toml file and recursively loading all
    settings.toml files specified in `sub_repos`.

## Stage 2

Processes A (in series):
 1. Recursively find all toml files in `artifact_paths` directories
 2. Load all files in parallel into raw Artifact objects

Processes B (in series):
 1. Recursively find all source code files in `code_paths` directories
 2. Parse out implementation locations

## Stage 3:

Processes A (in series):
 1. create parents
 2. link parents
 3. validate partof
 4. link parts

Processes B (in series):
 1. attach locations

## Stage 4:
 1. set completed and tested

# Error Scenarios
The only locations where critical failure (i.e. failure that causes `ls` to not work)
is possible is in step 1

Critical failure shall occur if:
- fs error
- invalid toml
- artifact errors (invalid name, extra attr, invalid attr type, etc)
- invalid partof string (artifact names)
- invalid artifact_path

Failures in further steps will simply cause warnings and will display on the
ui as missing links or None completion (etc)
'''

[TST-load]

[TST-load-invalid]
text = '''
load the following and make sure it results in an error:
 1. trying to input a json-like table `{}`
 2. trying to have multiple types in an array `[1, "hello", 3]`
 3. name collisions at the [] level
 4. name collisions at the base level
 5. `[file]` with an invalid attribute
 6. two files with same key
'''

[TST-load-simple]
text = '''
Create a simple project that has a few ins and outs
 - has multi-level values
 - has folder that is unreachable unless you set an extra path (which is set)
 - has recursive setting of paths (encouraging double-eval)
 - use default variables extensively

Litter this with artifacts at each level, some of which are implemented in a fake src/ dir
Validate that everything is as it should be
'''

[TST-load-valid]
text = '''
load the following and make sure values are present and correct:
 1. [file folder[file]]

 2. Unreachable should NOT get loaded:
```
 /foo/foo.art
 /foo/bar/baz/unreachable.art
```

 3. All three files should be loaded:
```
/foo/foo.art
/foo/bar/bar.art
/foo/bar/baz/baz.art
```
'''
